-- --------------------------------------------------------
-- Host:                         127.0.0.1
-- Server version:               5.1.65-community-log - MySQL Community Server (GPL)
-- Server OS:                    Win32
-- HeidiSQL version:             7.0.0.4053
-- Date/time:                    2014-04-24 20:31:12
-- --------------------------------------------------------

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET NAMES utf8 */;
/*!40014 SET FOREIGN_KEY_CHECKS=0 */;

-- Dumping database structure for project_tema
DROP DATABASE IF EXISTS `project_tema`;
CREATE DATABASE IF NOT EXISTS `project_tema` /*!40100 DEFAULT CHARACTER SET utf8 */;
USE `project_tema`;


-- Dumping structure for table project_tema.Arch_done
DROP TABLE IF EXISTS `Arch_done`;
CREATE TABLE IF NOT EXISTS `Arch_done` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `Task` int(11) DEFAULT NULL,
  `Layer0` int(11) DEFAULT NULL,
  `Layer1` int(11) DEFAULT NULL,
  `Layer2` int(11) DEFAULT NULL,
  `Layer3` int(11) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `FK_Arch_done_Task` (`Task`),
  KEY `FK_Arch_done_Lay_done` (`Layer0`),
  KEY `FK_Arch_done_Lay_done_2` (`Layer1`),
  KEY `FK_Arch_done_Lay_done_3` (`Layer2`),
  KEY `FK_Arch_done_Lay_done_4` (`Layer3`),
  CONSTRAINT `FK_Arch_done_Task` FOREIGN KEY (`Task`) REFERENCES `task` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=305 DEFAULT CHARSET=utf8;

-- Dumping data for table project_tema.Arch_done: ~38 rows (approximately)
/*!40000 ALTER TABLE `Arch_done` DISABLE KEYS */;
INSERT INTO `Arch_done` (`ID`, `Task`, `Layer0`, `Layer1`, `Layer2`, `Layer3`) VALUES
	(267, 7, 93, 94, 96, 0),
	(268, 7, 93, 95, 96, 0),
	(269, 8, 97, 100, 102, 0),
	(270, 8, 97, 101, 102, 0),
	(271, 8, 98, 100, 102, 0),
	(272, 8, 98, 101, 102, 0),
	(273, 8, 99, 100, 102, 0),
	(274, 8, 99, 101, 102, 0),
	(275, 9, 103, 106, 107, 0),
	(276, 9, 103, 106, 108, 0),
	(277, 9, 103, 106, 109, 0),
	(278, 9, 104, 106, 107, 0),
	(279, 9, 104, 106, 108, 0),
	(280, 9, 104, 106, 109, 0),
	(281, 9, 105, 106, 107, 0),
	(282, 9, 105, 106, 108, 0),
	(283, 9, 105, 106, 109, 0),
	(284, 10, 110, 113, 114, 0),
	(285, 10, 111, 113, 114, 0),
	(286, 10, 112, 113, 114, 0),
	(287, 11, 115, 116, 118, 0),
	(288, 11, 115, 116, 119, 0),
	(289, 11, 115, 116, 120, 0),
	(290, 11, 115, 117, 118, 0),
	(291, 11, 115, 117, 119, 0),
	(292, 11, 115, 117, 120, 0),
	(293, 12, 121, 124, 126, 0),
	(294, 12, 121, 125, 126, 0),
	(295, 12, 122, 124, 126, 0),
	(296, 12, 122, 125, 126, 0),
	(297, 12, 123, 124, 126, 0),
	(298, 12, 123, 125, 126, 0),
	(299, 13, 127, 128, 130, 0),
	(300, 13, 127, 128, 131, 0),
	(301, 13, 127, 128, 132, 0),
	(302, 13, 127, 129, 130, 0),
	(303, 13, 127, 129, 131, 0),
	(304, 13, 127, 129, 132, 0);
/*!40000 ALTER TABLE `Arch_done` ENABLE KEYS */;


-- Dumping structure for table project_tema.Arch_rating_dependability
DROP TABLE IF EXISTS `Arch_rating_dependability`;
CREATE TABLE IF NOT EXISTS `Arch_rating_dependability` (
  `ID` int(10) NOT NULL AUTO_INCREMENT,
  `Arch_1` int(10) DEFAULT '0',
  `Arch_2` int(10) DEFAULT '0',
  `dependability` double DEFAULT NULL,
  `Task` int(11) DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- Dumping data for table project_tema.Arch_rating_dependability: ~9 rows (approximately)
/*!40000 ALTER TABLE `Arch_rating_dependability` DISABLE KEYS */;
INSERT INTO `Arch_rating_dependability` (`ID`, `Arch_1`, `Arch_2`, `dependability`, `Task`) VALUES
	(1, 267, 268, 0.2, 7),
	(2, 293, 294, 3, 12),
	(3, 293, 295, 2, 12),
	(4, 293, 296, 3, 12),
	(5, 293, 297, 5, 12),
	(6, 293, 298, 2, 12),
	(7, 269, 269, 1, 8),
	(8, 269, 270, 2, 8),
	(9, 269, 271, 3, 8);
/*!40000 ALTER TABLE `Arch_rating_dependability` ENABLE KEYS */;


-- Dumping structure for table project_tema.Arch_rating_performance
DROP TABLE IF EXISTS `Arch_rating_performance`;
CREATE TABLE IF NOT EXISTS `Arch_rating_performance` (
  `ID` int(10) NOT NULL AUTO_INCREMENT,
  `Arch_1` int(10) DEFAULT '0',
  `Arch_2` int(10) DEFAULT '0',
  `performance` double DEFAULT NULL,
  `Task` int(11) DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=42 DEFAULT CHARSET=utf8;

-- Dumping data for table project_tema.Arch_rating_performance: ~41 rows (approximately)
/*!40000 ALTER TABLE `Arch_rating_performance` DISABLE KEYS */;
INSERT INTO `Arch_rating_performance` (`ID`, `Arch_1`, `Arch_2`, `performance`, `Task`) VALUES
	(1, 287, 288, 1, 11),
	(2, 287, 289, 0.111111111, 11),
	(3, 269, 270, 2, 8),
	(4, 269, 271, 3, 8),
	(5, 269, 272, 7, 8),
	(6, 269, 273, 0.142857142, 8),
	(7, 269, 274, 2, 8),
	(8, 270, 271, 3, 8),
	(9, 270, 272, 2, 8),
	(10, 267, 268, 2, 7),
	(11, 267, 268, 2, 7),
	(12, 269, 270, 2, 8),
	(13, 269, 270, 3, 8),
	(14, 269, 270, 3, 8),
	(15, 269, 270, 3, 8),
	(16, 267, 268, 1, 7),
	(17, 269, 270, 2, 8),
	(18, 269, 271, 5, 8),
	(19, 269, 272, 7, 8),
	(20, 269, 273, 0, 8),
	(21, 269, 274, 5, 8),
	(22, 267, 268, 3, 7),
	(23, 269, 270, 1, 8),
	(24, 267, 268, 4, 7),
	(25, 299, 300, 6, 13),
	(26, 299, 301, 3, 13),
	(27, 299, 302, 8, 13),
	(28, 299, 303, 6, 13),
	(29, 299, 304, 5, 13),
	(30, 300, 301, 7, 13),
	(31, 300, 302, 4, 13),
	(32, 300, 303, 1, 13),
	(33, 300, 304, 3, 13),
	(34, 301, 302, 5, 13),
	(35, 301, 303, 8, 13),
	(36, 301, 304, 9, 13),
	(37, 302, 303, 2, 13),
	(38, 302, 304, 5, 13),
	(39, 303, 304, 7, 13),
	(40, 269, 270, 5, 8),
	(41, 269, 271, 8, 8);
/*!40000 ALTER TABLE `Arch_rating_performance` ENABLE KEYS */;


-- Dumping structure for table project_tema.Arch_rating_security
DROP TABLE IF EXISTS `Arch_rating_security`;
CREATE TABLE IF NOT EXISTS `Arch_rating_security` (
  `ID` int(10) NOT NULL AUTO_INCREMENT,
  `Arch_1` int(10) DEFAULT '0',
  `Arch_2` int(10) DEFAULT '0',
  `security` double DEFAULT NULL,
  `Task` int(11) DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=COMPACT;

-- Dumping data for table project_tema.Arch_rating_security: ~0 rows (approximately)
/*!40000 ALTER TABLE `Arch_rating_security` DISABLE KEYS */;
/*!40000 ALTER TABLE `Arch_rating_security` ENABLE KEYS */;


-- Dumping structure for table project_tema.frame
DROP TABLE IF EXISTS `frame`;
CREATE TABLE IF NOT EXISTS `frame` (
  `ID` int(10) NOT NULL AUTO_INCREMENT,
  `Name` text NOT NULL,
  `UseType` int(10) NOT NULL,
  `Character` text NOT NULL,
  `layer_num` int(11) NOT NULL,
  `grath` text,
  PRIMARY KEY (`ID`),
  KEY `Use Type` (`UseType`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;

-- Dumping data for table project_tema.frame: ~6 rows (approximately)
/*!40000 ALTER TABLE `frame` DISABLE KEYS */;
INSERT INTO `frame` (`ID`, `Name`, `UseType`, `Character`, `layer_num`, `grath`) VALUES
	(3, 'Cквозной фунуционал', 4, '', 3, 'Grath/Frames/Web_open.jpg'),
	(4, 'Раздельная функциональность', 4, '', 3, 'Grath/Frames/Web_open.jpg'),
	(5, 'Cквозной фунуционал', 5, '', 4, NULL),
	(6, 'Cквозной фунуционал', 6, '', 3, NULL),
	(7, 'Раздельная функциональность', 5, '', 4, NULL),
	(8, 'Раздельная функциональность', 6, '', 3, NULL);
/*!40000 ALTER TABLE `frame` ENABLE KEYS */;


-- Dumping structure for table project_tema.layer
DROP TABLE IF EXISTS `layer`;
CREATE TABLE IF NOT EXISTS `layer` (
  `ID` int(10) NOT NULL AUTO_INCREMENT,
  `Name` text NOT NULL,
  `Character` text NOT NULL,
  `Usetype` int(10) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `FK_layer_usetype` (`Usetype`),
  CONSTRAINT `FK_layer_usetype` FOREIGN KEY (`Usetype`) REFERENCES `usetype` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;

-- Dumping data for table project_tema.layer: ~19 rows (approximately)
/*!40000 ALTER TABLE `layer` DISABLE KEYS */;
INSERT INTO `layer` (`ID`, `Name`, `Character`, `Usetype`) VALUES
	(1, 'Слой Представления', 'Данный слой содержит ориентированную на пользователя функциональность, которая отвечает за реализацию взаимодействием пользователя с системой, и, как правило, включает компоненты, обеспечивающие общую связь с основной бизнес-логикой, инкапсулириванной в бизнес-слое.', 4),
	(2, 'Бизнес слой', 'Этот слой реализует основную функциональность системы и инкапсулирует связанную с ней бизнес-логику. Обычно он состоит из компонентов, некоторые из которых предоставляют интерфейсы сервисов, доступные для использования другими участниками взаимодействия.', 4),
	(3, 'Слой доступа к данным', 'Этот слой обеспечивает доступ к данным, хранящимся в рамках системы, и данным, предоставляемым другими сетевыми системами.', 4),
	(4, 'Слой Представления', 'Данный слой содержит ориентированную на пользователя функциональность, которая отвечает за реализацию взаимодействием пользователя с системой, и, как правило, включает компоненты, обеспечивающие общую связь с основной бизнес-логикой, инкапсулириванной в бизнес-слое.', 5),
	(5, 'Бизнес слой', 'Этот слой реализует основную функциональность системы и инкапсулирует связанную с ней бизнес-логику. Обычно он состоит из компонентов, некоторые из которых предоставляют интерфейсы сервисов, доступные для использования другими участниками взаимодействия.', 5),
	(6, 'Слой доступа к данным', 'Этот слой обеспечивает доступ к данным, хранящимся в рамках системы, и данным, предоставляемым другими сетевыми системами.', 5),
	(8, 'Слой Представления', '', NULL),
	(9, 'Бизнес слой', '', NULL),
	(10, 'Слой доступа к данным', '', NULL),
	(11, 'Слой Представления', '', NULL),
	(12, 'Бизнес слой', '', NULL),
	(13, 'Слой доступа к данным', '', NULL),
	(15, 'Слой Сервисов', 'В слое сервисов определяется и реализуется интерфейс сервиса и контракты данных (или типы сообщений).', 6),
	(16, 'Бизнес слой', 'Этот слой реализует основную функциональность системы и инкапсулирует связанную с ней бизнес-логику. Обычно он состоит из компонентов, некоторые из которых предоставляют интерфейсы сервисов, доступные для использования другими участниками взаимодействия.', 6),
	(17, 'Слой доступа к данным', 'Этот слой обеспечивает доступ к данным, хранящимся в рамках системы, и данным, предоставляемым другими сетевыми системами.', 6),
	(18, 'Слой Представления', '', NULL),
	(19, 'Слой Сервисов', '', NULL),
	(20, 'Бизнес слой', '', NULL),
	(21, 'Слой доступа к данным', '', NULL);
/*!40000 ALTER TABLE `layer` ENABLE KEYS */;


-- Dumping structure for table project_tema.Lay_done
DROP TABLE IF EXISTS `Lay_done`;
CREATE TABLE IF NOT EXISTS `Lay_done` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `patern0` int(11) DEFAULT NULL,
  `patern1` int(11) DEFAULT NULL,
  `patern2` int(11) DEFAULT NULL,
  `patern3` int(11) DEFAULT NULL,
  `patern4` int(11) DEFAULT NULL,
  `Task` int(10) DEFAULT NULL,
  `Type` int(10) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `FK_Lay_done_Task` (`Task`),
  CONSTRAINT `FK_Lay_done_Task` FOREIGN KEY (`Task`) REFERENCES `task` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=133 DEFAULT CHARSET=utf8;

-- Dumping data for table project_tema.Lay_done: ~40 rows (approximately)
/*!40000 ALTER TABLE `Lay_done` DISABLE KEYS */;
INSERT INTO `Lay_done` (`ID`, `patern0`, `patern1`, `patern2`, `patern3`, `patern4`, `Task`, `Type`) VALUES
	(93, 8, 0, 0, 0, 0, 7, 0),
	(94, 2, 3, 5, 0, 0, 7, 1),
	(95, 2, 4, 5, 0, 0, 7, 1),
	(96, 11, 0, 0, 0, 0, 7, 2),
	(97, 8, 0, 0, 0, 0, 8, 0),
	(98, 9, 0, 0, 0, 0, 8, 0),
	(99, 10, 0, 0, 0, 0, 8, 0),
	(100, 2, 4, 5, 0, 0, 8, 1),
	(101, 2, 4, 7, 0, 0, 8, 1),
	(102, 11, 0, 0, 0, 0, 8, 2),
	(103, 8, 0, 0, 0, 0, 9, 0),
	(104, 9, 0, 0, 0, 0, 9, 0),
	(105, 10, 0, 0, 0, 0, 9, 0),
	(106, 2, 3, 5, 0, 0, 9, 1),
	(107, 11, 0, 0, 0, 0, 9, 2),
	(108, 12, 0, 0, 0, 0, 9, 2),
	(109, 13, 0, 0, 0, 0, 9, 2),
	(110, 8, 0, 0, 0, 0, 10, 0),
	(111, 9, 0, 0, 0, 0, 10, 0),
	(112, 10, 0, 0, 0, 0, 10, 0),
	(113, 2, 3, 5, 0, 0, 10, 1),
	(114, 11, 0, 0, 0, 0, 10, 2),
	(115, 8, 0, 0, 0, 0, 11, 0),
	(116, 2, 3, 5, 0, 0, 11, 1),
	(117, 2, 3, 7, 0, 0, 11, 1),
	(118, 11, 0, 0, 0, 0, 11, 2),
	(119, 12, 0, 0, 0, 0, 11, 2),
	(120, 13, 0, 0, 0, 0, 11, 2),
	(121, 18, 0, 0, 0, 0, 12, 0),
	(122, 19, 0, 0, 0, 0, 12, 0),
	(123, 20, 0, 0, 0, 0, 12, 0),
	(124, 14, 15, 21, 0, 0, 12, 1),
	(125, 14, 16, 21, 0, 0, 12, 1),
	(126, 22, 0, 0, 0, 0, 12, 2),
	(127, 8, 0, 0, 0, 0, 13, 0),
	(128, 2, 3, 5, 0, 0, 13, 1),
	(129, 2, 4, 5, 0, 0, 13, 1),
	(130, 11, 0, 0, 0, 0, 13, 2),
	(131, 12, 0, 0, 0, 0, 13, 2),
	(132, 13, 0, 0, 0, 0, 13, 2);
/*!40000 ALTER TABLE `Lay_done` ENABLE KEYS */;


-- Dumping structure for table project_tema.Modules
DROP TABLE IF EXISTS `Modules`;
CREATE TABLE IF NOT EXISTS `Modules` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `Name` text NOT NULL,
  `Layer` int(11) NOT NULL,
  `Funk` text NOT NULL,
  `Char` text NOT NULL,
  PRIMARY KEY (`ID`),
  KEY `FK_Modules_layer` (`Layer`),
  CONSTRAINT `FK_Modules_layer` FOREIGN KEY (`Layer`) REFERENCES `layer` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8;

-- Dumping data for table project_tema.Modules: ~19 rows (approximately)
/*!40000 ALTER TABLE `Modules` DISABLE KEYS */;
INSERT INTO `Modules` (`ID`, `Name`, `Layer`, `Funk`, `Char`) VALUES
	(1, 'Фасад приложения', 2, '', 'Этот необязательный компонент обычно обеспечивает упрощенный интерфейс для компонентов бизнес-логики, часто сочетая множество бизнес-операций в одну, что упрощает использование бизнес-логики.'),
	(2, 'Компоненты бизнес-процесса.', 2, '', 'После того, как компоненты UI получили необходимые данные от пользователя и передали их в бизнес-слой, приложение может использовать эти данные для осуществления бизнес-процесса. Большинство бизнес-процессов включают множество этапов, которые должны выполняться в установленном порядке и могут взаимодействовать друг с другом через различные механизмы координирования.'),
	(4, 'Компоненты бизнес-сущностей.', 2, '', 'Бизнес-сущности, или более общее название – бизнес-объекты, инкапсулируют бизнес-логику и данные, необходимые для представления в приложении объектов реального мира, таких как заказчики (Customers) или заказы (Orders).'),
	(5, 'Компоненты UI', 1, '', 'это визуальные элементы, отображающие данные пользователю и принимающие пользовательский ввод. В рамках отдельного слоя представления их обычно называют Представлениями (Views).'),
	(7, 'Компоненты доступа к данным', 3, '', 'Эти компоненты абстрагируют логику, необходимую для доступа к базовым хранилищам данных. Они обеспечивают централизацию общей функциональности доступа к данным, что способствует упрощению настройки и обслуживания приложения.'),
	(9, 'Агенты сервисов', 3, '', 'это объекты, которые управляют семантикой взаимодействия с внешними сервисами, изолируют приложение от специфических особенностей взаимодействия с разными сервисами и обеспечивают дополнительные сервисы, такие как сопоставление формата данных, предоставляемого сервисом, и формата, требуемого приложением. Они также могут реализовывать кэширование и поддержку работы в автономном режиме или неустойчивого подключения.'),
	(10, 'Фасад приложения', 5, '', 'Этот необязательный компонент обычно обеспечивает упрощенный интерфейс для компонентов бизнес-логики, часто сочетая множество бизнес-операций в одну, что упрощает использование бизнес-логики.'),
	(11, 'Компоненты доступа к данным', 6, '', 'Эти компоненты абстрагируют логику, необходимую для доступа к базовым хранилищам данных. Они обеспечивают централизацию общей функциональности доступа к данным, что способствует упрощению настройки и обслуживания приложения.'),
	(12, 'Компоненты бизнес-процесса.', 5, '', 'После того, как компоненты UI получили необходимые данные от пользователя и передали их в бизнес-слой, приложение может использовать эти данные для осуществления бизнес-процесса. Большинство бизнес-процессов включают множество этапов, которые должны выполняться в установленном порядке и могут взаимодействовать друг с другом через различные механизмы координирования.'),
	(13, 'Компоненты бизнес-сущностей.', 5, '', 'Бизнес-сущности, или более общее название – бизнес-объекты, инкапсулируют бизнес-логику и данные, необходимые для представления в приложении объектов реального мира, таких как заказчики (Customers) или заказы (Orders).'),
	(14, 'Компоненты UI', 4, '', 'это визуальные элементы, отображающие данные пользователю и принимающие пользовательский ввод. В рамках отдельного слоя представления их обычно называют Представлениями (Views).'),
	(15, 'Агенты сервисов', 6, '', 'это объекты, которые управляют семантикой взаимодействия с внешними сервисами, изолируют приложение от специфических особенностей взаимодействия с разными сервисами и обеспечивают дополнительные сервисы, такие как сопоставление формата данных, предоставляемого сервисом, и формата, требуемого приложением. Они также могут реализовывать кэширование и поддержку работы в автономном режиме или неустойчивого подключения.'),
	(16, 'Фасад приложения', 16, '', 'Этот необязательный компонент обычно обеспечивает упрощенный интерфейс для компонентов бизнес-логики, часто сочетая множество бизнес-операций в одну, что упрощает использование бизнес-логики.'),
	(17, 'Компоненты бизнес-процесса.', 16, '', 'После того, как компоненты UI получили необходимые данные от пользователя и передали их в бизнес-слой, приложение может использовать эти данные для осуществления бизнес-процесса. Большинство бизнес-процессов включают множество этапов, которые должны выполняться в установленном порядке и могут взаимодействовать друг с другом через различные механизмы координирования.'),
	(18, 'Компоненты бизнес-сущностей.', 16, '', 'Бизнес-сущности, или более общее название – бизнес-объекты, инкапсулируют бизнес-логику и данные, необходимые для представления в приложении объектов реального мира, таких как заказчики (Customers) или заказы (Orders).'),
	(19, 'Компоненты доступа к данным', 17, '', 'Эти компоненты абстрагируют логику, необходимую для доступа к базовым хранилищам данных. Они обеспечивают централизацию общей функциональности доступа к данным, что способствует упрощению настройки и обслуживания приложения.'),
	(20, 'Агенты сервисов', 17, '', 'это объекты, которые управляют семантикой взаимодействия с внешними сервисами, изолируют приложение от специфических особенностей взаимодействия с разными сервисами и обеспечивают дополнительные сервисы, такие как сопоставление формата данных, предоставляемого сервисом, и формата, требуемого приложением. Они также могут реализовывать кэширование и поддержку работы в автономном режиме или неустойчивого подключения.'),
	(22, 'Интерфейсы сервисов', 15, '', 'Сервисы предоставляют интерфейсы, в которые передаются все входящие сообщения. Интерфейс сервиса можно рассматривать как фасад, предоставляющий потенциальным потребителям доступ к бизнес-логике, реализованной в приложении (как правило, логику бизнес-слоя).'),
	(23, 'Типы сообщений', 15, '', 'При обмене данными через слой сервисов структуры данных заключаются в структуры сообщений, поддерживающие разные типы операций. Слой сервисов также обычно включает типы и контракты данных, которые определяют используемые в сообщениях типы данных.');
/*!40000 ALTER TABLE `Modules` ENABLE KEYS */;


-- Dumping structure for table project_tema.patern
DROP TABLE IF EXISTS `patern`;
CREATE TABLE IF NOT EXISTS `patern` (
  `ID` int(10) NOT NULL AUTO_INCREMENT,
  `Name` char(50) NOT NULL,
  `Sequrity` char(50) NOT NULL,
  `Capasity` char(50) NOT NULL,
  `Character` text,
  `Module` int(10) DEFAULT NULL,
  PRIMARY KEY (`ID`),
  KEY `FK_patern_Modules` (`Module`),
  CONSTRAINT `FK_patern_Modules` FOREIGN KEY (`Module`) REFERENCES `layers` (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=37 DEFAULT CHARSET=utf8;

-- Dumping data for table project_tema.patern: ~32 rows (approximately)
/*!40000 ALTER TABLE `patern` DISABLE KEYS */;
INSERT INTO `patern` (`ID`, `Name`, `Sequrity`, `Capasity`, `Character`, `Module`) VALUES
	(2, 'Application Façade (Фасад приложения).', 'Високая', 'Средняя', 'Централизует и агрегирует поведение для обеспечения унифицированного слоя сервисов.', 1),
	(3, 'Chain of Responsibility (Цепочка обязанностей).', 'Низкая', 'Високая', 'Предоставляя возможность обработать запрос нескольким объектам, устраняет возможность связывания отправителя запроса с его получателем.', 2),
	(4, 'Command (Команда).', 'Средняя', 'Високая', 'Инкапсулирует обработку запроса в отдельный командный объект с общим интерфейсом выполнения.', 2),
	(5, 'Domain Model (Модель предметной области).', 'Средняя', 'Низкая', 'Набор бизнес-объектов, представляющих сущности предметной области и отношения между ними.', 4),
	(7, 'Entity Translator (Транслятор сущностей).', 'Високая', 'Средняя', 'Объект, преобразующий типы данных сообщения в бизнес-типы для запросов и выполняющий обратные преобразования для ответов.', 4),
	(8, 'Analytics.', 'Низкая', 'Средняя', 'Специализированная версия шаблона Mesh Composite View, предлагающая конечным пользователям панель анализа данных.', 5),
	(9, 'Mesh Composite View.', 'Низкая', 'Низкая', 'Использует такие компоненты UI, как Веб-части ASP.NET или компоненты MOSS, которые функционируют совместно для предоставления данных одной или разных LOB-систем.', 5),
	(10, 'RSS and Web Services Composition', 'Средняя', '', 'Специализированная версия шаблона Mesh Composite View, объединяющая данные, опубликованные посредством RSS-каналов или Веб-сервисов.', 5),
	(11, 'Active Record (Активная запись).', '', '', 'Включает объект доступа к данным в сущность предметной области.', 7),
	(12, 'Data Mapper (Преобразователь данных).', '', '', 'Реализует слой преобразования между объектами и структурой базы данных, используемый для перемещения данных из одной структуры в другую, обеспечивая при этом их независимость.', 7),
	(13, 'Parallel Processing (Параллельная обработка).', '', '', 'Позволяет обрабатывать множество пакетных операций одновременно, чтобы сократить время обработки.', 7),
	(14, 'Application Façade (Фасад приложения).', 'Високая', 'Средняя', 'Централизует и агрегирует поведение для обеспечения унифицированного слоя сервисов.', 10),
	(15, 'Chain of Responsibility (Цепочка обязанностей).', 'Низкая', 'Високая', 'Предоставляя возможность обработать запрос нескольким объектам, устраняет возможность связывания отправителя запроса с его получателем.', 12),
	(16, 'Command (Команда).', 'Средняя', 'Високая', 'Инкапсулирует обработку запроса в отдельный командный объект с общим интерфейсом выполнения.', 12),
	(17, 'Domain Model (Модель предметной области).', 'Средняя', 'Низкая', 'Набор бизнес-объектов, представляющих сущности предметной области и отношения между ними.', 13),
	(18, 'Analytics.', 'Низкая', 'Средняя', 'Специализированная версия шаблона Mesh Composite View, предлагающая конечным пользователям панель анализа данных.', 14),
	(19, 'RSS and Web Services Composition', 'Средняя', '', 'Специализированная версия шаблона Mesh Composite View, объединяющая данные, опубликованные посредством RSS-каналов или Веб-сервисов.', 14),
	(20, 'Mesh Composite View.', 'Низкая', 'Низкая', 'Использует такие компоненты UI, как Веб-части ASP.NET или компоненты MOSS, которые функционируют совместно для предоставления данных одной или разных LOB-систем.', 14),
	(21, 'Entity Translator (Транслятор сущностей).', 'Високая', 'Средняя', 'Объект, преобразующий типы данных сообщения в бизнес-типы для запросов и выполняющий обратные преобразования для ответов.', 13),
	(22, 'Active Record (Активная запись).', '', '', 'Включает объект доступа к данным в сущность предметной области.', 11),
	(23, 'Data Mapper (Преобразователь данных).', '', '', 'Реализует слой преобразования между объектами и структурой базы данных, используемый для перемещения данных из одной структуры в другую, обеспечивая при этом их независимость.', 11),
	(24, 'Parallel Processing (Параллельная обработка).', '', '', 'Позволяет обрабатывать множество пакетных операций одновременно, чтобы сократить время обработки.', 11),
	(25, 'Command (Команда),', '', '', NULL, 23),
	(26, 'Document (Документ)', '', '', NULL, 23),
	(27, 'Application Façade (Фасад приложения).', 'Високая', 'Средняя', 'Централизует и агрегирует поведение для обеспечения унифицированного слоя сервисов.', 16),
	(29, 'Chain of Responsibility (Цепочка обязанностей).', 'Низкая', 'Високая', 'Предоставляя возможность обработать запрос нескольким объектам, устраняет возможность связывания отправителя запроса с его получателем.', 17),
	(30, 'Command (Команда).', 'Средняя', 'Високая', 'Инкапсулирует обработку запроса в отдельный командный объект с общим интерфейсом выполнения.', 17),
	(31, 'Domain Model (Модель предметной области).', 'Средняя', 'Низкая', 'Набор бизнес-объектов, представляющих сущности предметной области и отношения между ними.', 18),
	(33, 'Entity Translator (Транслятор сущностей).', 'Високая', 'Средняя', 'Объект, преобразующий типы данных сообщения в бизнес-типы для запросов и выполняющий обратные преобразования для ответов.', 18),
	(34, 'Active Record (Активная запись).', '', '', 'Включает объект доступа к данным в сущность предметной области.', 19),
	(35, 'Data Mapper (Преобразователь данных).', '', '', 'Реализует слой преобразования между объектами и структурой базы данных, используемый для перемещения данных из одной структуры в другую, обеспечивая при этом их независимость.', 19),
	(36, 'Parallel Processing (Параллельная обработка).', '', '', 'Позволяет обрабатывать множество пакетных операций одновременно, чтобы сократить время обработки.', 19);
/*!40000 ALTER TABLE `patern` ENABLE KEYS */;


-- Dumping structure for table project_tema.Task
DROP TABLE IF EXISTS `Task`;
CREATE TABLE IF NOT EXISTS `Task` (
  `ID` int(11) NOT NULL AUTO_INCREMENT,
  `Name` text NOT NULL,
  `Usetype` int(10) DEFAULT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=14 DEFAULT CHARSET=utf8;

-- Dumping data for table project_tema.Task: ~7 rows (approximately)
/*!40000 ALTER TABLE `Task` DISABLE KEYS */;
INSERT INTO `Task` (`ID`, `Name`, `Usetype`) VALUES
	(7, 'Test_task_1', 4),
	(8, 'Test_task_2', 4),
	(9, 'Test_task_3', 4),
	(10, 'tyu', 4),
	(11, 'yty', 4),
	(12, '78', 5),
	(13, 'Наша решаемая задача', 4);
/*!40000 ALTER TABLE `Task` ENABLE KEYS */;


-- Dumping structure for table project_tema.usetype
DROP TABLE IF EXISTS `usetype`;
CREATE TABLE IF NOT EXISTS `usetype` (
  `ID` int(10) NOT NULL AUTO_INCREMENT,
  `Name` text NOT NULL,
  `Character` text NOT NULL,
  `Grath` text NOT NULL,
  PRIMARY KEY (`ID`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;

-- Dumping data for table project_tema.usetype: ~3 rows (approximately)
/*!40000 ALTER TABLE `usetype` DISABLE KEYS */;
INSERT INTO `usetype` (`ID`, `Name`, `Character`, `Grath`) VALUES
	(4, 'Веб Приложение', 'Приложения этого типа, как правило, поддерживают сценарии с постоянным подключением и различные браузеры, выполняющиеся в разнообразнейших операционных системах и на разных платформах.', 'Grath/Usetypes/Web_open.jpg'),
	(5, 'Клиентское приложение', 'Приложения этого типа обычно разрабатываются как самодостаточные приложения с графическим пользовательским интерфейсом, который обеспечивает отображение данных с помощью набора', 'Grath/Usetypes/Client_open.jpg'),
	(6, 'Приложение сервисов', 'Сервис – это открытый интерфейс, обеспечивающий доступ к единице функциональности. Сервисы являются гибкими по своей природе и могут использоваться в разнообразнейших сценариях и комбинациях.', 'Grath/Usetypes/Servis_open.jpg');
/*!40000 ALTER TABLE `usetype` ENABLE KEYS */;
/*!40014 SET FOREIGN_KEY_CHECKS=1 */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
